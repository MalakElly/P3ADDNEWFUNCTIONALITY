@model P3AddNewFunctionalityDotNetCore.Models.Cart
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/carthub")
            .build();

        connection.start()
            .then(() => console.log("✅ SignalR connecté avec succès"))
            .catch(err => console.error("❌ SignalR échec de connexion: ", err));

        connection.on("ProductUnavailable", function (productId) {
            console.log("🔴 Notification reçue - Produit en rupture:", productId);

            // Vérifie si l'élément avec le bon productId existe bien
            var row = document.querySelector(`tr[data-product-id="${productId}"]`);
            if (row) {
                console.log("✅ Produit trouvé dans le panier, mise à jour en cours...");

                // Ajoute un style pour indiquer que le produit n'est plus disponible
                row.style.backgroundColor = "#ffcccc"; // Rouge clair
                row.style.opacity = "0.5"; // Rendre la ligne semi-transparente

                // Désactiver le bouton "Supprimer"
                var removeButton = row.querySelector("button.btn-danger");
                if (removeButton) {
                    removeButton.disabled = true;
                    removeButton.innerText = "Indisponible";
                }

                // Ajouter un message sous le produit
                var messageRow = document.createElement("tr");
                messageRow.innerHTML = `<td colspan="5" class="text-center text-danger">
                        ⚠ Le produit <strong>${row.querySelector('.text-start').innerText}</strong> n'est plus en stock !
                    </td>`;
                row.after(messageRow);

                // Met à jour le total et la moyenne du panier
                updateCartTotals();
            } else {
                console.error("⚠ Erreur : Impossible de trouver l'élément tr[data-product-id='" + productId + "']");
            }
        });

        // Fonction pour recalculer le total et la moyenne
        function updateCartTotals() {
            let total = 0;
            let itemCount = 0;

            document.querySelectorAll("tbody tr[data-product-id]").forEach(row => {
                if (!row.style.backgroundColor) { // Exclut les produits supprimés
                    let priceText = row.querySelector("td:nth-child(4)").innerText;
                    let price = parseFloat(priceText.replace(/[^0-9,.-]/g, '').replace(',', '.')); // Convertir en nombre
                    total += price;
                    itemCount++;
                }
            });

            let average = itemCount > 0 ? (total / itemCount).toFixed(2) : "0.00";

            // Met à jour les éléments HTML
            document.querySelector("#cartTotal").innerText = total.toFixed(2) + " €";
            document.querySelector("#cartAverage").innerText = total.toFixed(2) + " €";
        }
    });
</script>




<h2>@Localizer["YourCart"]</h2>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>@Localizer["Quantity"]</th>
            <th>@Localizer["Item"]</th>
            <th class="text-end">@Localizer["Price"]</th>
            <th class="text-end">@Localizer["Subtotal"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var line in Model.Lines)
        {
            <tr data-product-id="@line.Product.Id">
                <td data-product-Quantity="@line.Quantity" class="text-center">@line.Quantity</td>
                <td class="text-start">@line.Product.Name</td>
                <td data-product-Price="@line.Product.Price" class="text-end">@line.Product.Price.ToString("c")</td>
                <td class="text-end">
                    @((line.Quantity * line.Product.Price).ToString("c"))
                </td>
                <td>
                    <form asp-action="RemoveFromCart" method="post">
                        <input type="hidden" name="id" value="@line.Product.Id" />
                        <button type="submit" class="btn btn-sm btn-danger">
                            @Localizer["Remove"]
                        </button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-end">@Localizer["Total"]:</td>
            <td class="text-end" id="cartTotal">
                @Model.GetTotalValue().ToString("c")
            </td>
        </tr>
        <tr>
            <td colspan="3" class="text-end">@Localizer["Average"]:</td>
            <td class="text-end" id="cartAverage">
                @Model.GetAverageValue().ToString("c")
            </td>
        </tr>
    </tfoot>
</table>
<div class="text-center">
    <a class="btn btn-primary" asp-action="Index" asp-controller="Product">@Localizer["ContinueShopping"]</a>
    <a class="btn btn-primary" asp-action="Index" asp-controller="Order">@Localizer["Checkout"]</a>
</div>

